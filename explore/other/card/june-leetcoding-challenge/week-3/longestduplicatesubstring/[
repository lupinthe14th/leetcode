package longestduplicatesubstring

import (
	"math"
)

// https://leetcode.com/problems/longest-duplicate-substring/discuss/290871/Python-Binary-Search
func longestDupSubstring(S string) string {
	const MOD = 1<<63 - 1
	memo := make([]int, len(S))
	for i := range S {
		memo[i] = int(S[i] - 'a')
	}
	power := make([]int, len(S))
	power[0] = 1
	for i := 1; i < len(S); i++ {
		power[i] = (power[i-1] * 26) % MOD
	}
	seen := make(map[int]bool)

	var helper func(l int) int

	helper = func(l int) int {
		p := int(math.Pow(26, float64(l))) % MOD
		cur := 0
		for i := range memo[:l] {
			cur = (cur*26 + memo[i]) % MOD
		}
		seen[cur] = true
		out := 0
		for i := l; i < len(S); i++ {
			cur = (cur*26 + memo[i] - memo[i-l]*p) % MOD
			if seen[cur] {
				out = i - l + 1
				break
			}
			seen[cur] = true
		}
		return out
	}

	ans, lo, hi := 0, 0, len(S)
	for lo < hi {
		mi := (lo + hi + 1) / 2
		pos := helper(mi)
		if pos != 0 {
			lo = mi
			ans = pos
		} else {
			hi = mi - 1
		}
	}
	return S[ans : ans+lo]
}
